AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Gardening Weather Advisor Agent'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name for resource naming
    AllowedValues:
      - dev
      - staging
      - prod

  UserDataTableName:
    Type: String
    Default: plant_database_users
    Description: Name for the user data DynamoDB table

  PlantDefinitionsTableName:
    Type: String
    Default: garden_plants
    Description: Name for the plant definitions DynamoDB table

  LambdaFunctionName:
    Type: String
    Default: gardening-agent
    Description: Name for the Lambda function

  BedrockRegion:
    Type: String
    Default: eu-west-2
    Description: AWS region for Bedrock model access

  CodeS3Bucket:
    Type: String
    Default: ""
    Description: S3 bucket containing Lambda deployment package (optional)

  CodeS3Key:
    Type: String
    Default: ""
    Description: S3 key for Lambda deployment package (optional)

Resources:
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${LambdaFunctionName}-${Environment}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UserDataTable.Arn
                  - !GetAtt PlantDefinitionsTable.Arn
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: !Sub 'arn:aws:bedrock:${BedrockRegion}:*:foundation-model/amazon.nova-lite-v1:0'

  # User Data DynamoDB Table
  UserDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${UserDataTableName}-${Environment}'
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: gardening-agent

  # Plant Definitions DynamoDB Table
  PlantDefinitionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${PlantDefinitionsTableName}-${Environment}'
      AttributeDefinitions:
        - AttributeName: plant_id
          AttributeType: S
      KeySchema:
        - AttributeName: plant_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: gardening-agent

  # Lambda Function
  GardeningAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${LambdaFunctionName}-${Environment}'
      Runtime: python3.13
      Handler: src.agent.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Placeholder code - actual deployment will use packaged source
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Function created successfully"}
      Environment:
        Variables:
          USER_DATA_TABLE_NAME: !Ref UserDataTable
          PLANT_DEFINITIONS_TABLE_NAME: !Ref PlantDefinitionsTable
          BEDROCK_REGION: !Ref BedrockRegion
      Timeout: 300
      MemorySize: 512
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: gardening-agent

  # API Gateway REST API
  GardeningAgentApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${LambdaFunctionName}-api-${Environment}'
      Description: REST API for Gardening Agent
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: gardening-agent

  # API Gateway Resource for /advice endpoint
  AdviceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GardeningAgentApi
      ParentId: !GetAtt GardeningAgentApi.RootResourceId
      PathPart: advice

  # POST Method for /advice endpoint with Lambda proxy integration
  AdvicePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GardeningAgentApi
      ResourceId: !Ref AdviceResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GardeningAgentFunction.Arn}/invocations'

  # OPTIONS Method for CORS preflight requests
  AdviceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GardeningAgentApi
      ResourceId: !Ref AdviceResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permission for API Gateway invocation
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GardeningAgentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GardeningAgentApi}/*/*'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AdvicePostMethod
      - AdviceOptionsMethod
    Properties:
      RestApiId: !Ref GardeningAgentApi
      Description: !Sub 'Deployment for ${Environment} environment'

  # API Gateway Stage
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref GardeningAgentApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: !Ref Environment
      Description: !Sub 'Development stage for ${Environment} environment'
      Variables:
        Environment: !Ref Environment
        LambdaFunctionName: !Ref GardeningAgentFunction
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: gardening-agent

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt GardeningAgentFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref GardeningAgentFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  UserDataTableName:
    Description: Name of the user data DynamoDB table
    Value: !Ref UserDataTable
    Export:
      Name: !Sub '${AWS::StackName}-UserDataTableName'

  UserDataTableArn:
    Description: ARN of the user data DynamoDB table
    Value: !GetAtt UserDataTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserDataTableArn'

  PlantDefinitionsTableName:
    Description: Name of the plant definitions DynamoDB table
    Value: !Ref PlantDefinitionsTable
    Export:
      Name: !Sub '${AWS::StackName}-PlantDefinitionsTableName'

  PlantDefinitionsTableArn:
    Description: ARN of the plant definitions DynamoDB table
    Value: !GetAtt PlantDefinitionsTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PlantDefinitionsTableArn'

  IAMRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleArn'

  ApiGatewayUrl:
    Description: URL of the API Gateway endpoint
    Value: !Sub 'https://${GardeningAgentApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/advice'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiGatewayId:
    Description: ID of the API Gateway
    Value: !Ref GardeningAgentApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  ApiGatewayStageName:
    Description: Name of the API Gateway stage
    Value: !Ref ApiGatewayStage
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayStageName'